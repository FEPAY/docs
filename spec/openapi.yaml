openapi: 3.0.0
info:
  version: '1.0.0'
  title: FEPAY

  contact:
    email: by09115@outlook.kr

  x-logo:
    url: 'https://apis.guru/openapi-template/logo.png'

  description: |
    FEPAY의 API Document입니다.

tags:
  - name: Admin
    description: 어드민 관련
  - name: User
    description: 사용자 관련
  - name: Payment
    description: 결제 관련
servers:
  - url: 'http://fepay.jaehoon.kim/api/v1'

paths:
  '/user/signup':
    post:
      tags:
        - User
      summary: 사용자 회원가입
      description: |
        # 사용자 계정을 생성합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - deviceId
                - password
                - name
                - phone
              properties:
                deviceId:
                  type: string
                  example: "165j2214-051z-3176-b586-138o3d420071"
                password:
                  type: string
                  example: "p@ssword"
                name:
                  type: string
                  example: "김재훈"
                phone:
                  type: string
                  example: "010-2432-3407"
      responses:
        201:
          description: 회원가입 성공
        400:
          description: 잘못된 정보
        409:
          description: 해당 ID를 가진 사용자가 이미 존재함(Conflict)


components:
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  # Security scheme definitions that can be used across the specification.
  securitySchemes:
    main_auth: # security definition name (you can name it as you want)
      # the following options are specific to oauth2 type
      type: oauth2 # authorization type, one of: oauth2, apiKey, http
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:  # security definition name (you can name it as you want)
      type: apiKey
      # The following options are specific to apiKey type
      in: header # Where API key will be passed: header or query
      name: api_key # API key parameter name
    basic_auth: # security definition name (you can name it as you want)
      type: http
      scheme: basic
